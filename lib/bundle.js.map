{"version":3,"sources":["webpack:///lib/bundle.js","webpack:///webpack/bootstrap 0d7b6879e03d53a71ef3","webpack:///./index.js","webpack:///external \"lodash\"","webpack:///./src/TreeMenu.jsx","webpack:///./src/TreeNode.jsx","webpack:///./src/TreeNodeMixin.js","webpack:///external \"react\"","webpack:///./src/TreeMenuUtils.js","webpack:///external \"invariant\"","webpack:///external \"object-assign\""],"names":["modules","__webpack_require__","moduleId","installedModules","exports","module","id","loaded","call","m","c","p","api","TreeMenu","TreeNode","Utils","require","React","TreeNodeFactory","createFactory","TreeNodeMixin","clone","omit","sortBy","invariant","assign","map","createClass","displayName","mixins","propTypes","stateful","PropTypes","bool","classNamePrefix","string","identifier","onTreeNodeClick","func","onTreeNodeCheckChange","onTreeNodeSelectChange","collapsible","expandIconClass","collapseIconClass","data","oneOfType","array","object","labelFilter","labelFactory","checkboxFactory","sort","getDefaultProps","render","props","this","createElement","className","_getTreeNodes","_getDataFromChildren","children","iterableChildren","Array","isArray","self","child","dataToNodes","ancestor","isRootNode","nodes","dataForNode","i","nodeProps","label","concat","thisComponent","getNodeId","treeMenuProps","getTreeNodeProps","sorter","node","treeData","noop","checkbox","collapsed","checked","isRequired","onClick","onCheckChange","onSelectChange","onCollapseChange","getInitialState","lineage","console","log","join","labelClassName","displayLabel","isChecked","type","onChange","_getCollapseNode","collapseNode","collapseClassName","_getRootCssClass","collapseToggleHandler","_handleCollapseChange","length","_isCollapsed","_handleClick","_getCheckboxNode","_getLabelNode","_getChildrenNode","componentWillReceiveProps","nextProps","_isStateful","mutations","setState","state","Children","cloneElement","key","ref","_isSelected","_getLineage","_isChecked","selected","_handleCheckChange","_handleSelectChange","_toggleNodeStateIfStateful","field","newValue","mutation","pick","extend","rootProps","childIndex","onTreeNodeCollapseChange","TreeMenuUtils","getNewTreeState","prevState","mutatedProperty","setPropState","value","forEach","childNode","ci","getUpdatedTreeState","shift","nodeId"],"mappings":"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","file":"./lib/bundle.js","sourcesContent":["/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar api = __webpack_require__(2);\n\t\n\tapi.TreeMenu = __webpack_require__(2);\n\tapi.TreeNode = __webpack_require__(3);\n\tapi.Utils = __webpack_require__(6);\n\t\n\tmodule.exports = api;\n\n/***/ },\n/* 1 */\n/***/ function(module, exports) {\n\n\tmodule.exports = require(\"lodash\");\n\n/***/ },\n/* 2 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar React = __webpack_require__(5),\n\t    TreeNode = __webpack_require__(3),\n\t    TreeNodeFactory = React.createFactory(TreeNode),\n\t    TreeNodeMixin = __webpack_require__(4),\n\t    clone = __webpack_require__(1).clone,\n\t    omit = __webpack_require__(1).omit,\n\t    sortBy = __webpack_require__(1).sortBy,\n\t    invariant = __webpack_require__(7),\n\t    assign = __webpack_require__(8),\n\t    map = __webpack_require__(1).map;\n\t\n\t/**\n\t * The root component for a tree view. Can have one or many <TreeNode/> children\n\t *\n\t * @type {TreeMenu}\n\t */\n\tvar TreeMenu = React.createClass({\n\t  displayName: 'TreeMenu',\n\t\n\t\n\t  mixins: [TreeNodeMixin],\n\t\n\t  propTypes: {\n\t\n\t    stateful: React.PropTypes.bool,\n\t    classNamePrefix: React.PropTypes.string,\n\t    identifier: React.PropTypes.string,\n\t    onTreeNodeClick: React.PropTypes.func,\n\t    onTreeNodeCheckChange: React.PropTypes.func,\n\t    onTreeNodeSelectChange: React.PropTypes.func,\n\t    collapsible: React.PropTypes.bool,\n\t    expandIconClass: React.PropTypes.string,\n\t    collapseIconClass: React.PropTypes.string,\n\t    data: React.PropTypes.oneOfType([React.PropTypes.array, React.PropTypes.object]),\n\t    labelFilter: React.PropTypes.func,\n\t    labelFactory: React.PropTypes.func,\n\t    checkboxFactory: React.PropTypes.func,\n\t    sort: React.PropTypes.oneOfType([React.PropTypes.bool, React.PropTypes.function])\n\t  },\n\t\n\t  getDefaultProps: function getDefaultProps() {\n\t    return {\n\t      classNamePrefix: \"tree-view\",\n\t      stateful: false\n\t    };\n\t  },\n\t\n\t  render: function render() {\n\t\n\t    var props = this.props;\n\t\n\t    return React.createElement(\n\t      'div',\n\t      { className: props.classNamePrefix },\n\t      this._getTreeNodes()\n\t    );\n\t  },\n\t\n\t  /**\n\t   * Gets data from declarative TreeMenu nodes\n\t   *\n\t   * @param children\n\t   * @returns {*}\n\t   * @private\n\t   */\n\t  _getDataFromChildren: function _getDataFromChildren(children) {\n\t\n\t    var iterableChildren = Array.isArray(children) ? children : [children];\n\t\n\t    var self = this;\n\t    return iterableChildren.map(function (child) {\n\t\n\t      var data = clone(omit(child.props, \"children\"));\n\t\n\t      if (child.props.children) {\n\t        data.children = self._getDataFromChildren(child.props.children);\n\t      }\n\t\n\t      return data;\n\t    });\n\t  },\n\t\n\t  /**\n\t   * Get TreeNode instances for render()\n\t   *\n\t   * @returns {*}\n\t   * @private\n\t   */\n\t  _getTreeNodes: function _getTreeNodes() {\n\t\n\t    var treeMenuProps = this.props,\n\t        treeData;\n\t\n\t    invariant(!treeMenuProps.children || !treeMenuProps.data, \"Either children or data props are expected in TreeMenu, but not both\");\n\t\n\t    if (treeMenuProps.children) {\n\t      treeData = this._getDataFromChildren(treeMenuProps.children);\n\t    } else {\n\t      treeData = treeMenuProps.data;\n\t    }\n\t\n\t    var thisComponent = this;\n\t\n\t    function dataToNodes(data, ancestor) {\n\t\n\t      var isRootNode = false;\n\t      if (!ancestor) {\n\t        isRootNode = true;\n\t        ancestor = [];\n\t      }\n\t\n\t      var nodes = map(data, function (dataForNode, i) {\n\t\n\t        var nodeProps = omit(dataForNode, [\"children\", \"onClick\", \"onCheckChange\"]),\n\t            children = [];\n\t\n\t        nodeProps.label = nodeProps.label || i;\n\t\n\t        if (dataForNode.children) {\n\t          children = dataToNodes(dataForNode.children, ancestor.concat(thisComponent.getNodeId(treeMenuProps, nodeProps, i)));\n\t        }\n\t\n\t        nodeProps = assign(nodeProps, thisComponent.getTreeNodeProps(treeMenuProps, nodeProps, ancestor, isRootNode, i));\n\t\n\t        return TreeNodeFactory(nodeProps, children);\n\t      });\n\t\n\t      var sort = thisComponent.props.sort;\n\t\n\t      if (sort) {\n\t        var sorter = typeof sort === \"boolean\" ? function (node) {\n\t          return node.props.label;\n\t        } : sort;\n\t        nodes = sortBy(nodes, sorter);\n\t      }\n\t\n\t      return nodes;\n\t    }\n\t\n\t    if (treeData) {\n\t      return dataToNodes(treeData);\n\t    }\n\t  }\n\t\n\t});\n\t\n\tmodule.exports = TreeMenu;\n\n/***/ },\n/* 3 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar React = __webpack_require__(5),\n\t    TreeNodeMixin = __webpack_require__(4),\n\t    noop = __webpack_require__(1).noop;\n\t\n\t/**\n\t * Individual nodes in tree hierarchy, nested under a single <TreeMenu/> node\n\t *\n\t *\n\t * @type {TreeNode}\n\t */\n\tvar TreeNode = React.createClass({\n\t  displayName: 'TreeNode',\n\t\n\t\n\t  mixins: [TreeNodeMixin],\n\t\n\t  propTypes: {\n\t\n\t    stateful: React.PropTypes.bool,\n\t    checkbox: React.PropTypes.bool,\n\t    collapsible: React.PropTypes.bool,\n\t    collapsed: React.PropTypes.bool,\n\t    expandIconClass: React.PropTypes.string,\n\t    collapseIconClass: React.PropTypes.string,\n\t    checked: React.PropTypes.bool,\n\t    label: React.PropTypes.string.isRequired,\n\t    classNamePrefix: React.PropTypes.string,\n\t    onClick: React.PropTypes.func,\n\t    onCheckChange: React.PropTypes.func,\n\t    onSelectChange: React.PropTypes.func,\n\t    onCollapseChange: React.PropTypes.func,\n\t    labelFilter: React.PropTypes.func,\n\t    labelFactory: React.PropTypes.func,\n\t    checkboxFactory: React.PropTypes.func\n\t\n\t  },\n\t\n\t  getInitialState: function getInitialState() {\n\t    return {};\n\t  },\n\t\n\t  getDefaultProps: function getDefaultProps() {\n\t    return {\n\t      stateful: false,\n\t      collapsible: true,\n\t      collapsed: false,\n\t      checkbox: false,\n\t      onClick: function onClick(lineage) {\n\t        console.log(\"Tree Node clicked: \" + lineage.join(\" > \"));\n\t      },\n\t      onCheckChange: function onCheckChange(lineage) {\n\t        console.log(\"Tree Node indicating a checkbox check state should change: \" + lineage.join(\" > \"));\n\t      },\n\t      onCollapseChange: function onCollapseChange(lineage) {\n\t        console.log(\"Tree Node indicating collapse state should change: \" + lineage.join(\" > \"));\n\t      },\n\t      checked: false,\n\t      expandIconClass: \"\",\n\t      collapseIconClass: \"\",\n\t      labelFactory: function labelFactory(labelClassName, displayLabel) {\n\t        return React.createElement(\n\t          'label',\n\t          { className: labelClassName },\n\t          displayLabel\n\t        );\n\t      },\n\t      checkboxFactory: function checkboxFactory(className, isChecked) {\n\t        return React.createElement('input', {\n\t          className: className,\n\t          type: 'checkbox',\n\t          checked: isChecked,\n\t          onChange: noop });\n\t      }\n\t    };\n\t  },\n\t\n\t  _getCollapseNode: function _getCollapseNode() {\n\t    var props = this.props,\n\t        collapseNode = null;\n\t\n\t    if (props.collapsible) {\n\t      var collapseClassName = this._getRootCssClass() + \"-collapse-toggle \";\n\t      var collapseToggleHandler = this._handleCollapseChange;\n\t      if (!props.children || props.children.length === 0) {\n\t        collapseToggleHandler = noop;\n\t        collapseClassName += \"collapse-spacer\";\n\t      } else {\n\t        collapseClassName += this._isCollapsed() ? props.expandIconClass : props.collapseIconClass;\n\t      }\n\t      collapseNode = React.createElement('span', { onClick: collapseToggleHandler, className: collapseClassName });\n\t    }\n\t    return collapseNode;\n\t  },\n\t\n\t  render: function render() {\n\t    return React.createElement(\n\t      'div',\n\t      { className: this._getRootCssClass() },\n\t      this._getCollapseNode(),\n\t      React.createElement(\n\t        'span',\n\t        { onClick: this._handleClick },\n\t        this._getCheckboxNode(),\n\t        this._getLabelNode()\n\t      ),\n\t      this._getChildrenNode()\n\t    );\n\t  },\n\t\n\t  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {\n\t\n\t    if (!this._isStateful()) return;\n\t\n\t    var mutations = {};\n\t\n\t    if (this.props.checked !== nextProps.checked) {\n\t      mutations.checked = nextProps.checked;\n\t    }\n\t\n\t    this.setState(mutations);\n\t  },\n\t\n\t  _getRootCssClass: function _getRootCssClass() {\n\t    return this.props.classNamePrefix + \"-node\";\n\t  },\n\t\n\t  _getChildrenNode: function _getChildrenNode() {\n\t\n\t    var props = this.props;\n\t\n\t    if (this._isCollapsed()) return null;\n\t\n\t    var children = props.children;\n\t\n\t    if (this._isStateful()) {\n\t      var state = this.state;\n\t      children = React.Children.map(props.children, function (child) {\n\t        return React.cloneElement(child, {\n\t          key: child.key,\n\t          ref: child.ref,\n\t          checked: state.checked\n\t        });\n\t      });\n\t    }\n\t\n\t    return React.createElement(\n\t      'div',\n\t      { className: this._getRootCssClass() + \"-children\" },\n\t      children\n\t    );\n\t  },\n\t\n\t  _getLabelNode: function _getLabelNode() {\n\t\n\t    var props = this.props,\n\t        labelClassName = props.classNamePrefix + \"-node-label\";\n\t\n\t    if (this._isSelected()) {\n\t      labelClassName += \" selected\";\n\t    }\n\t\n\t    var displayLabel = props.label;\n\t\n\t    if (props.labelFilter) displayLabel = props.labelFilter(displayLabel);\n\t\n\t    return this.props.labelFactory(labelClassName, displayLabel, this._getLineage());\n\t  },\n\t\n\t  _getCheckboxNode: function _getCheckboxNode() {\n\t    var props = this.props;\n\t    if (!props.checkbox) return null;\n\t\n\t    return this.props.checkboxFactory(props.classNamePrefix + \"-node-checkbox\", this._isChecked(), this._getLineage());\n\t  },\n\t\n\t  _isStateful: function _isStateful() {\n\t\n\t    return this.props.stateful ? true : false;\n\t  },\n\t\n\t  _isChecked: function _isChecked() {\n\t\n\t    if (this._isStateful() && typeof this.state.checked !== \"undefined\") return this.state.checked;\n\t    return this.props.checked;\n\t  },\n\t\n\t  _isSelected: function _isSelected() {\n\t\n\t    if (this._isStateful() && typeof this.state.selected !== \"undefined\") return this.state.selected;\n\t    return this.props.selected;\n\t  },\n\t\n\t  _isCollapsed: function _isCollapsed() {\n\t\n\t    if (this._isStateful() && typeof this.state.collapsed !== \"undefined\") return this.state.collapsed;\n\t\n\t    if (!this.props.collapsible) return false;\n\t\n\t    return this.props.collapsed;\n\t  },\n\t\n\t  _handleClick: function _handleClick() {\n\t    if (this.props.checkbox) {\n\t      return this._handleCheckChange();\n\t    } else if (this.props.onSelectChange) {\n\t      return this._handleSelectChange();\n\t    }\n\t\n\t    this.props.onClick(this._getLineage());\n\t  },\n\t\n\t  _toggleNodeStateIfStateful: function _toggleNodeStateIfStateful(field) {\n\t    if (this._isStateful()) {\n\t      var newValue = !this.props[field];\n\t      if (typeof this.state[field] !== \"undefined\") {\n\t        newValue = !this.state[field];\n\t      }\n\t      var mutation = {};\n\t      mutation[field] = newValue;\n\t      console.log(mutation);\n\t      this.setState(mutation);\n\t    }\n\t  },\n\t\n\t  _handleCheckChange: function _handleCheckChange() {\n\t\n\t    this._toggleNodeStateIfStateful(\"checked\");\n\t\n\t    this.props.onCheckChange(this._getLineage());\n\t  },\n\t\n\t  _handleSelectChange: function _handleSelectChange() {\n\t\n\t    this._toggleNodeStateIfStateful(\"selected\");\n\t\n\t    this.props.onSelectChange(this._getLineage());\n\t  },\n\t\n\t  _handleCollapseChange: function _handleCollapseChange() {\n\t\n\t    this._toggleNodeStateIfStateful(\"collapsed\");\n\t\n\t    this.props.onCollapseChange(this._getLineage());\n\t  },\n\t\n\t  _getLineage: function _getLineage() {\n\t\n\t    return this.props.ancestor.concat(this.props.id);\n\t  }\n\t\n\t});\n\t\n\tmodule.exports = TreeNode;\n\n/***/ },\n/* 4 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar pick = __webpack_require__(1).pick,\n\t    extend = __webpack_require__(1).assign;\n\t\n\tvar TreeNodeMixin = {\n\t\n\t  /**\n\t   * Build the properties necessary for the TreeNode instance\n\t   *\n\t   * @param rootProps\n\t   * @param props\n\t   * @param ancestor\n\t   * @param isRootNode\n\t   * @param childIndex\n\t   * @returns {{classNamePrefix: (*|TreeMenu.propTypes.classNamePrefix|TreeMenu.getDefaultProps.classNamePrefix|TreeNodeMixin._getTreeNodeProps.classNamePrefix), collapseIconClass: (*|TreeMenu.propTypes.collapseIconClass|App._getStaticTreeExample.collapseIconClass|App._getDynamicTreeExample.collapseIconClass|TreeNodeMixin._getTreeNodeProps.collapseIconClass), expandIconClass: (*|TreeMenu.propTypes.expandIconClass|App._getStaticTreeExample.expandIconClass|App._getDynamicTreeExample.expandIconClass|TreeNodeMixin._getTreeNodeProps.expandIconClass), collapsible: (*|TreeMenu.propTypes.collapsible|TreeMenu.getDefaultProps.collapsible|App._getStaticTreeExample.collapsible|TreeNodeMixin._getTreeNodeProps.collapsible), ancestor: *, onClick: (TreeMenu.propTypes.onTreeNodeClick|*|App._getStaticTreeExample.onTreeNodeClick|App._getDynamicTreeExample.onTreeNodeClick), onCheckChange: (TreeMenu.propTypes.onTreeNodeCheckChange|*|App._getStaticTreeExample.onTreeNodeCheckChange|App._getDynamicTreeExample.onTreeNodeCheckChange), onCollapseChange: (App._getDynamicTreeExample.onTreeNodeCollapseChange|*), id: *, key: string}}\n\t   * @private\n\t   */\n\t  getTreeNodeProps: function getTreeNodeProps(rootProps, props, ancestor, isRootNode, childIndex) {\n\t\n\t    //TODO: use omit/pick to clean this up\n\t\n\t    return extend({\n\t      ancestor: ancestor,\n\t      onClick: rootProps.onTreeNodeClick,\n\t      onCheckChange: rootProps.onTreeNodeCheckChange,\n\t      onSelectChange: rootProps.onTreeNodeSelectChange,\n\t      onCollapseChange: rootProps.onTreeNodeCollapseChange,\n\t      id: this.getNodeId(rootProps, props, childIndex),\n\t      key: \"tree-node-\" + ancestor.join(\".\") + childIndex\n\t    }, pick(rootProps, \"classNamePrefix\", \"collapseIconClass\", \"expandIconClass\", \"collapsible\", \"stateful\", \"labelFilter\", \"checkboxFactory\", \"labelFactory\"));\n\t  },\n\t\n\t  getNodeId: function getNodeId(rootProps, props, childIndex) {\n\t    return rootProps.identifier && props[rootProps.identifier] ? props[rootProps.identifier] : childIndex;\n\t  }\n\t};\n\t\n\tmodule.exports = TreeNodeMixin;\n\n/***/ },\n/* 5 */\n/***/ function(module, exports) {\n\n\tmodule.exports = require(\"react\");\n\n/***/ },\n/* 6 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\t\n\tvar TreeMenuUtils = {\n\t\n\t  /**\n\t   * //TODO: use immutable API here..this function mutates!\n\t   *\n\t   * @param lineage\n\t   * @param prevState\n\t   * @param mutatedProperty\n\t   * @param identifier optional\n\t   * @returns {*}\n\t   */\n\t  getNewTreeState: function getNewTreeState(lineage, prevState, mutatedProperty, identifier) {\n\t\n\t    function setPropState(node, value) {\n\t      node[mutatedProperty] = value;\n\t      var children = node.children;\n\t      if (children) {\n\t        node.children.forEach(function (childNode, ci) {\n\t          setPropState(childNode, value);\n\t        });\n\t      }\n\t    }\n\t\n\t    function getUpdatedTreeState(state) {\n\t      state = state || prevState;\n\t      var id = lineage.shift();\n\t      state.forEach(function (node, i) {\n\t        var nodeId = identifier ? state[i][identifier] : i;\n\t        if (nodeId === id) {\n\t          if (!lineage.length) {\n\t            setPropState(state[i], !state[i][mutatedProperty]);\n\t          } else {\n\t            state[i].children = getUpdatedTreeState(state[i].children);\n\t          }\n\t        }\n\t      });\n\t\n\t      return state;\n\t    }\n\t\n\t    return getUpdatedTreeState();\n\t  }\n\t\n\t};\n\t\n\tmodule.exports = TreeMenuUtils;\n\n/***/ },\n/* 7 */\n/***/ function(module, exports) {\n\n\tmodule.exports = require(\"invariant\");\n\n/***/ },\n/* 8 */\n/***/ function(module, exports) {\n\n\tmodule.exports = require(\"object-assign\");\n\n/***/ }\n/******/ ]);\n\n\n/** WEBPACK FOOTER **\n ** lib/bundle.js\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap 0d7b6879e03d53a71ef3\n **/","var api = require('./src/TreeMenu.jsx');\n\napi.TreeMenu = require('./src/TreeMenu.jsx');\napi.TreeNode = require('./src/TreeNode.jsx');\napi.Utils = require('./src/TreeMenuUtils');\n\nmodule.exports = api;\n\n\n/** WEBPACK FOOTER **\n ** ./index.js\n **/","module.exports = require(\"lodash\");\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external \"lodash\"\n ** module id = 1\n ** module chunks = 0\n **/","var React = require('react'),\n  TreeNode = require('./TreeNode.jsx'),\n  TreeNodeFactory = React.createFactory(TreeNode),\n  TreeNodeMixin = require('./TreeNodeMixin'),\n  clone = require('lodash').clone,\n  omit = require('lodash').omit,\n  sortBy = require('lodash').sortBy,\n  invariant = require('invariant'),\n  assign = require('object-assign'),\n  map = require('lodash').map;\n\n/**\n * The root component for a tree view. Can have one or many <TreeNode/> children\n *\n * @type {TreeMenu}\n */\nvar TreeMenu = React.createClass({\n\n  mixins : [TreeNodeMixin],\n\n  propTypes : {\n\n    stateful: React.PropTypes.bool,\n    classNamePrefix: React.PropTypes.string,\n    identifier: React.PropTypes.string,\n    onTreeNodeClick: React.PropTypes.func,\n    onTreeNodeCheckChange: React.PropTypes.func,\n    onTreeNodeSelectChange: React.PropTypes.func,\n    collapsible: React.PropTypes.bool,\n    expandIconClass: React.PropTypes.string,\n    collapseIconClass: React.PropTypes.string,\n    data: React.PropTypes.oneOfType([\n      React.PropTypes.array,\n      React.PropTypes.object\n    ]),\n    labelFilter: React.PropTypes.func,\n    labelFactory: React.PropTypes.func,\n    checkboxFactory: React.PropTypes.func,\n    sort: React.PropTypes.oneOfType([\n      React.PropTypes.bool,\n      React.PropTypes.function\n    ])\n  },\n\n  getDefaultProps: function () {\n    return {\n      classNamePrefix: \"tree-view\",\n      stateful: false\n    }\n  },\n\n  render : function () {\n\n    var props = this.props;\n\n    return (\n      <div className={props.classNamePrefix}>\n        {this._getTreeNodes()}\n      </div>);\n\n  },\n\n  /**\n   * Gets data from declarative TreeMenu nodes\n   *\n   * @param children\n   * @returns {*}\n   * @private\n   */\n  _getDataFromChildren: function (children) {\n\n    var iterableChildren = Array.isArray(children) ? children : [children];\n\n    var self = this;\n    return iterableChildren.map(function (child) {\n\n      var data = clone(omit(child.props, \"children\"));\n\n      if (child.props.children) {\n        data.children = self._getDataFromChildren(child.props.children);\n      }\n\n      return data;\n    });\n  },\n\n  /**\n   * Get TreeNode instances for render()\n   *\n   * @returns {*}\n   * @private\n   */\n  _getTreeNodes: function() {\n    \n    var treeMenuProps = this.props,\n      treeData;\n\n    invariant(!treeMenuProps.children || !treeMenuProps.data,\n      \"Either children or data props are expected in TreeMenu, but not both\");\n\n    if (treeMenuProps.children) {\n      treeData = this._getDataFromChildren(treeMenuProps.children);\n    } else {\n      treeData = treeMenuProps.data;\n    }\n\n    var thisComponent = this;\n\n\n    function dataToNodes(data, ancestor) {\n\n      var isRootNode = false;\n      if (!ancestor) {\n        isRootNode = true;\n        ancestor = [];\n      }\n\n      var nodes = map(data, function(dataForNode, i) {\n\n        var nodeProps = omit(dataForNode, [\"children\", \"onClick\", \"onCheckChange\"]),\n          children = [];\n\n        nodeProps.label = nodeProps.label || i;\n\n        if (dataForNode.children) {\n          children = dataToNodes(dataForNode.children, ancestor.concat(thisComponent.getNodeId(treeMenuProps, nodeProps, i)));\n        }\n\n        nodeProps = assign(nodeProps, thisComponent.getTreeNodeProps(treeMenuProps, nodeProps, ancestor, isRootNode, i));\n\n        return TreeNodeFactory(nodeProps, children);\n\n      });\n\n      var sort = thisComponent.props.sort;\n\n      if (sort) {\n        var sorter = typeof sort === \"boolean\" ? function (node) { return node.props.label } : sort;\n        nodes = sortBy(nodes, sorter);\n      }\n\n      return nodes;\n\n    }\n\n    if (treeData) {\n      return dataToNodes(treeData);\n    }\n\n  }\n\n});\n\n\nmodule.exports = TreeMenu;\n\n\n/** WEBPACK FOOTER **\n ** ./src/TreeMenu.jsx\n **/","var React = require('react'),\n  TreeNodeMixin = require('./TreeNodeMixin'),\n  noop = require('lodash').noop;\n\n/**\n * Individual nodes in tree hierarchy, nested under a single <TreeMenu/> node\n *\n *\n * @type {TreeNode}\n */\nvar TreeNode = React.createClass({\n\n  mixins : [TreeNodeMixin],\n\n  propTypes : {\n\n    stateful: React.PropTypes.bool,\n    checkbox: React.PropTypes.bool,\n    collapsible : React.PropTypes.bool,\n    collapsed : React.PropTypes.bool,\n    expandIconClass: React.PropTypes.string,\n    collapseIconClass: React.PropTypes.string,\n    checked: React.PropTypes.bool,\n    label: React.PropTypes.string.isRequired,\n    classNamePrefix: React.PropTypes.string,\n    onClick: React.PropTypes.func,\n    onCheckChange: React.PropTypes.func,\n    onSelectChange: React.PropTypes.func,\n    onCollapseChange: React.PropTypes.func,\n    labelFilter: React.PropTypes.func,\n    labelFactory: React.PropTypes.func,\n    checkboxFactory: React.PropTypes.func\n\n  },\n\n  getInitialState: function () {\n    return {};\n  },\n\n  getDefaultProps: function () {\n    return {\n      stateful: false,\n      collapsible: true,\n      collapsed: false,\n      checkbox : false,\n      onClick: function(lineage) {\n        console.log(\"Tree Node clicked: \" + lineage.join(\" > \"));\n      },\n      onCheckChange: function (lineage) {\n        console.log(\"Tree Node indicating a checkbox check state should change: \" + lineage.join(\" > \"));\n      },\n      onCollapseChange: function (lineage) {\n        console.log(\"Tree Node indicating collapse state should change: \" + lineage.join(\" > \"));\n      },\n      checked : false,\n      expandIconClass: \"\",\n      collapseIconClass: \"\",\n      labelFactory: function (labelClassName, displayLabel) {\n        return <label className={labelClassName}>{displayLabel}</label>;\n      },\n      checkboxFactory: function (className, isChecked) {\n        return (\n          <input\n          className={className}\n          type=\"checkbox\"\n          checked={isChecked}\n          onChange={noop}/>);\n      }\n    }\n  },\n  \n  _getCollapseNode: function() {\n    var props = this.props,\n      collapseNode = null;\n\n    if (props.collapsible) {\n      var collapseClassName = this._getRootCssClass() + \"-collapse-toggle \";\n      var collapseToggleHandler = this._handleCollapseChange;\n      if (!props.children || props.children.length === 0) {\n        collapseToggleHandler = noop;\n        collapseClassName += \"collapse-spacer\";\n      } else {\n        collapseClassName += (this._isCollapsed() ? props.expandIconClass : props.collapseIconClass);\n      }\n      collapseNode = <span onClick={collapseToggleHandler} className={collapseClassName}></span>\n    }\n    return collapseNode;\n  },\n\n  render : function () {\n    return (\n      <div className={this._getRootCssClass()}>\n        {this._getCollapseNode()}\n        <span onClick={this._handleClick}>\n          {this._getCheckboxNode()}\n          {this._getLabelNode()}\n        </span>\n        {this._getChildrenNode()}\n      </div>\n    );\n  },\n\n  componentWillReceiveProps: function (nextProps) {\n\n    if (!this._isStateful()) return;\n\n    var mutations = {};\n\n    if (this.props.checked !== nextProps.checked) {\n      mutations.checked = nextProps.checked;\n    }\n\n    this.setState(mutations);\n\n  },\n\n  _getRootCssClass: function () {\n    return this.props.classNamePrefix + \"-node\";\n  },\n\n  _getChildrenNode: function () {\n\n    var props = this.props;\n\n    if (this._isCollapsed()) return null;\n\n    var children = props.children;\n\n    if (this._isStateful()) {\n      var state = this.state;\n      children = React.Children.map(props.children, function (child) {\n        return React.cloneElement(child, {\n          key: child.key,\n          ref: child.ref,\n          checked : state.checked\n        })\n      });\n    } \n\n    return (\n      <div className={this._getRootCssClass() + \"-children\"}>\n          {children}\n      </div>\n    );\n\n  },\n\n  _getLabelNode: function () {\n\n    var props = this.props,\n      labelClassName = props.classNamePrefix + \"-node-label\";\n\n    if (this._isSelected()) {\n      labelClassName += \" selected\";\n    }\n\n    var displayLabel = props.label;\n\n    if (props.labelFilter) displayLabel = props.labelFilter(displayLabel);\n\n    return this.props.labelFactory(labelClassName, displayLabel, this._getLineage());\n  },\n\n  _getCheckboxNode: function () {\n    var props = this.props;\n    if (!props.checkbox) return null;\n\n    return this.props.checkboxFactory(props.classNamePrefix + \"-node-checkbox\", this._isChecked(), this._getLineage());\n  },\n\n  _isStateful: function () {\n\n    return this.props.stateful ? true : false;\n\n  },\n\n  _isChecked: function () {\n\n    if (this._isStateful() && typeof this.state.checked !== \"undefined\") return this.state.checked;\n    return this.props.checked;\n\n  },\n\n  _isSelected: function () {\n\n    if (this._isStateful() && typeof this.state.selected !== \"undefined\") return this.state.selected;\n    return this.props.selected;\n\n  },\n\n  _isCollapsed: function () {\n\n    if (this._isStateful() && typeof this.state.collapsed !== \"undefined\") return this.state.collapsed;\n\n    if (!this.props.collapsible) return false;\n\n    return this.props.collapsed;\n\n  },\n\n  _handleClick: function () {\n    if (this.props.checkbox) {\n      return this._handleCheckChange();\n    } else if (this.props.onSelectChange) {\n      return this._handleSelectChange();\n    }\n\n    this.props.onClick(this._getLineage());\n\n  },\n\n  _toggleNodeStateIfStateful: function (field) {\n    if (this._isStateful()) {\n      var newValue = !this.props[field];\n      if (typeof this.state[field] !== \"undefined\") {\n        newValue = !this.state[field];\n      }\n      var mutation = {};\n      mutation[field] = newValue;\n      console.log(mutation);\n      this.setState(mutation);\n    }\n\n  },\n\n  _handleCheckChange: function () {\n\n    this._toggleNodeStateIfStateful(\"checked\");\n\n    this.props.onCheckChange(this._getLineage());\n\n  },\n\n  _handleSelectChange: function () {\n\n    this._toggleNodeStateIfStateful(\"selected\");\n\n    this.props.onSelectChange(this._getLineage());\n\n  },\n\n  _handleCollapseChange: function () {\n\n    this._toggleNodeStateIfStateful(\"collapsed\");\n\n    this.props.onCollapseChange(this._getLineage());\n\n  },\n\n  _getLineage: function () {\n\n    return this.props.ancestor.concat(this.props.id);\n\n  }\n\n});\n\n\nmodule.exports = TreeNode;\n\n\n/** WEBPACK FOOTER **\n ** ./src/TreeNode.jsx\n **/","var pick = require('lodash').pick,\n  extend = require('lodash').assign;\n\nvar TreeNodeMixin = {\n\n  /**\n   * Build the properties necessary for the TreeNode instance\n   *\n   * @param rootProps\n   * @param props\n   * @param ancestor\n   * @param isRootNode\n   * @param childIndex\n   * @returns {{classNamePrefix: (*|TreeMenu.propTypes.classNamePrefix|TreeMenu.getDefaultProps.classNamePrefix|TreeNodeMixin._getTreeNodeProps.classNamePrefix), collapseIconClass: (*|TreeMenu.propTypes.collapseIconClass|App._getStaticTreeExample.collapseIconClass|App._getDynamicTreeExample.collapseIconClass|TreeNodeMixin._getTreeNodeProps.collapseIconClass), expandIconClass: (*|TreeMenu.propTypes.expandIconClass|App._getStaticTreeExample.expandIconClass|App._getDynamicTreeExample.expandIconClass|TreeNodeMixin._getTreeNodeProps.expandIconClass), collapsible: (*|TreeMenu.propTypes.collapsible|TreeMenu.getDefaultProps.collapsible|App._getStaticTreeExample.collapsible|TreeNodeMixin._getTreeNodeProps.collapsible), ancestor: *, onClick: (TreeMenu.propTypes.onTreeNodeClick|*|App._getStaticTreeExample.onTreeNodeClick|App._getDynamicTreeExample.onTreeNodeClick), onCheckChange: (TreeMenu.propTypes.onTreeNodeCheckChange|*|App._getStaticTreeExample.onTreeNodeCheckChange|App._getDynamicTreeExample.onTreeNodeCheckChange), onCollapseChange: (App._getDynamicTreeExample.onTreeNodeCollapseChange|*), id: *, key: string}}\n   * @private\n   */\n  getTreeNodeProps: function (rootProps, props, ancestor, isRootNode, childIndex) {\n\n    //TODO: use omit/pick to clean this up\n\n    return extend({\n      ancestor: ancestor,\n      onClick: rootProps.onTreeNodeClick,\n      onCheckChange: rootProps.onTreeNodeCheckChange,\n      onSelectChange: rootProps.onTreeNodeSelectChange,\n      onCollapseChange: rootProps.onTreeNodeCollapseChange,\n      id: this.getNodeId(rootProps, props, childIndex),\n      key: \"tree-node-\" + ancestor.join(\".\") + childIndex\n    }, pick(rootProps,\n      \"classNamePrefix\",\n      \"collapseIconClass\",\n      \"expandIconClass\",\n      \"collapsible\",\n      \"stateful\",\n      \"labelFilter\",\n      \"checkboxFactory\",\n      \"labelFactory\"));\n  },\n\n  getNodeId: function (rootProps, props, childIndex) {\n    return rootProps.identifier && props[rootProps.identifier] ? props[rootProps.identifier] : childIndex;\n  }\n};\n\n\nmodule.exports = TreeNodeMixin;\n\n\n/** WEBPACK FOOTER **\n ** ./src/TreeNodeMixin.js\n **/","module.exports = require(\"react\");\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external \"react\"\n ** module id = 5\n ** module chunks = 0\n **/","\nvar TreeMenuUtils = {\n\n  /**\n   * //TODO: use immutable API here..this function mutates!\n   *\n   * @param lineage\n   * @param prevState\n   * @param mutatedProperty\n   * @param identifier optional\n   * @returns {*}\n   */\n  getNewTreeState: function (lineage, prevState, mutatedProperty, identifier) {\n\n    function setPropState(node, value) {\n      node[mutatedProperty] = value;\n      var children = node.children;\n      if (children) {\n        node.children.forEach(function (childNode, ci) {\n          setPropState(childNode, value);\n        });\n      }\n    }\n\n    function getUpdatedTreeState(state) {\n      state = state || prevState;\n      var id = lineage.shift();\n      state.forEach(function (node, i) {\n        var nodeId = identifier ? state[i][identifier] : i;\n        if (nodeId === id) {\n          if (!lineage.length) {\n            setPropState(state[i], !state[i][mutatedProperty]);\n          } else {\n            state[i].children = getUpdatedTreeState(state[i].children);\n          }\n        }\n      });\n\n      return state;\n\n    }\n\n    return getUpdatedTreeState();\n\n  }\n\n};\n\nmodule.exports = TreeMenuUtils;\n\n\n/** WEBPACK FOOTER **\n ** ./src/TreeMenuUtils.js\n **/","module.exports = require(\"invariant\");\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external \"invariant\"\n ** module id = 7\n ** module chunks = 0\n **/","module.exports = require(\"object-assign\");\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external \"object-assign\"\n ** module id = 8\n ** module chunks = 0\n **/"],"sourceRoot":""}